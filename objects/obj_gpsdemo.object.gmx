<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init GPS and start location tracking.
if (! device_has_gps())
{
    gps_is_supported = false;
    show_debug_message("(ERROR!) This device does not have GPS.");
}
else
{
    gps_is_supported = true;
    location_init();
    if (!location_is_enabled())
        show_debug_message("Location is not enabled!");
    else
        location_update_start();
}

latest_location_timestamp = -1;
countryCode="??";
getCountry=undefined;
alarm[1]=room_speed*10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gps_is_supported &amp;&amp; location_is_enabled() &amp;&amp; location_is_available()) {
    getCountry = getCountryCode(location_get_latitude(), location_get_longitude());
}
else {
    alarm[1]=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resume location tracking if not currently updating.
if (location_is_updating())
    location_update_start();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop if location is not supported at all.
if (! gps_is_supported)
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop updating the location when the app is paused.
if (os_is_paused()) and (alarm[0] &lt;= 0)
{
    //Stop location tracking if currently updating
    if (location_is_updating())
    {
        show_debug_message("(stopping location updating)");
        location_update_stop();
        alarm[0] = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start updating the location if it gets possible (for example, when the user enables GPS).
if (! location_is_updating()) and (location_is_enabled()) and (alarm[0] &lt;= 0)
{
    location_update_start();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create location point to show the user where he/she's been
if (location_is_available())
{
    var lat = location_get_latitude(), long = location_get_longitude();
    if (location_get_age() &lt; 2000) //If the location is not too old
    {
        var location_time = location_get_time();
        if (location_time != latest_location_timestamp)
        {
            var centerx = room_width / 2, centery = (room_height - 250) / 2 + 200;
            
            // Move old points so that the new point is in the center.
            with (obj_locationpoint)
            {
                is_newest_point = false;
                depth = 10;
                if (point_long &gt; long)
                    x = centerx + point_distance_earth(lat, long, lat, point_long) * 10;
                else
                    x = centerx - point_distance_earth(lat, long, lat, point_long) * 10;
                if (point_lat &gt; lat)
                    y = centery - point_distance_earth(lat, long, point_lat, long) * 10;
                else
                    y = centery + point_distance_earth(lat, long, point_lat, long) * 10;
            }
            
            latest_location_timestamp = location_time;
            with (instance_create(centerx, centery, obj_locationpoint))
            {
                point_lat = lat;
                point_long = long;
                is_newest_point = true;
                point_accuracy = location_get_accuracy();
                depth = 5;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If GPS location has been disabled, open settings so that the user can enable it.
if (gps_is_supported) and (! location_is_enabled())
    location_open_settings();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map=async_load;
if (map[? "id"]==getCountry) {
    countryCode=map[? "result"];
    alarm[1]=room_speed*10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop location tracking.
if (gps_is_supported) and (location_is_updating())
    location_update_stop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw info
draw_set_font(fnt_std_gpsdemo);
if (! gps_is_supported)
{
    draw_set_color(c_red);
    draw_text(5, 0, "GPS is not supported on this device!");
}
else
{
    draw_set_color(c_black);
    if (! location_is_enabled())
    {
        //Location is not enabled. Ask user to enable.
        draw_text(5, 0, "GPS location has been disabled! Please enable it!#Tap anywhere to open the location settings.");
    }
    else
    {
        if (location_get_status() == 0)
        {
            //The location is updating, but GPS does not work at this moment.
            //This might be because there's no clear sky above the phone.
            draw_text(5, 0, "We can't update your location at this time!");
        }
        else
        {
            //The location is succesfully updating!
            draw_text(5, 0, "Your location is being tracked!");
        }
        
        if (! location_is_available())
        {
            draw_text(5, 50, "No location available at this moment.");
        }
        else
        {
            //Draw the values of the location.
            draw_text(5, 50, "Location age (in ms): " + string_format(location_get_age(), -1, 0));
            draw_text(room_width / 2 + 5, 50, "Timestamp: " + string_format(location_get_time(), -1, 0));
            
            draw_text(5, 100, "Latitude: " + string_format(location_get_latitude(), -1, 8));
            draw_text(room_width / 2 + 5, 100, "Longitude: " + string_format(location_get_longitude(), -1, 8));
            draw_text(5, 150, "Code: "+countryCode);
            exit;
            
            if (location_has_altitude())
                draw_text(5, 150, "Altitude: " + string_format(location_get_altitude(), -1, 3));
            else
                draw_text(5, 150, "Altitude unknown");
            if (location_has_accuracy())
                draw_text(room_width / 2 + 5, 150, "Accuracy: " + string_format(location_get_accuracy(), -1, 0));
            else
                draw_text(room_width / 2 + 5, 150, "Accuracy unknown");
            
            if (location_has_bearing())
                draw_text(5, 200, "Bearing: " + string_format(location_get_bearing(), -1, 3));
            else
                draw_text(5, 200, "Bearing unknown");
            if (location_has_speed())
                draw_text(room_width / 2 + 5, 200, "Speed: " + string_format(location_get_speed(), -1, 8));
            else
                draw_text(room_width / 2 + 5, 200, "Speed unknown");
        }
    }
}
draw_text(5, room_height - 50, "GPS Location demo by Florian van Strien");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
