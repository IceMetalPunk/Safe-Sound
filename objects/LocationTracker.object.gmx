<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init GPS and start location tracking.
if (!device_has_gps()) {
    gps_is_supported = false;
}
else {
    gps_is_supported = true;
    location_init();
    if (location_is_enabled()) {
        location_update_start();
    }
}

latest_location_timestamp = -1;
countryCode="??";
countryName="??";
getCountry=undefined;
getEmergency=undefined;
latitude=undefined;
longitude=undefined;
gettingEmergencyNumber = true;
emergencyNumber="34567";
locationRefreshRate = 5; // How many seconds between each latitude/longitude refresh?
alarm[1]=1;
alarm[2]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update latitude and longitude
if (debug_mode) {
    latitude=26.157669067383;
    longitude=-80.286109924316;
    alarm[2]=room_speed*locationRefreshRate;
}
else if (gps_is_supported &amp;&amp; location_is_enabled() &amp;&amp; location_is_available()) {
    latitude=location_get_latitude();
    longitude=location_get_longitude();
    alarm[2]=room_speed*locationRefreshRate;
}
else {
    alarm[2]=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Request country code from latitude and longitude
if (debug_mode) {
    latitude=26.157669067383;
    longitude=-80.286109924316;
    getCountry = getCountryCode(latitude, longitude);
}
else if (gps_is_supported &amp;&amp; location_is_enabled() &amp;&amp; location_is_available()) {
    latitude=location_get_latitude();
    longitude=location_get_longitude();
    getCountry = getCountryCode(latitude, longitude);
}
else {
    alarm[1]=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Resume location tracking after pause
if (location_is_updating()) {
    location_update_start();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop updating the location when the app is paused.
if (os_is_paused() &amp;&amp; alarm[0]&lt;=0) {
    //Stop location tracking if currently updating
    if (location_is_updating()) {
        location_update_stop();
        alarm[0] = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process HTTP requests

var map=async_load, ID = map[? "id"], result=map[? "result"];

if (ID==getCountry) {
    result=json_decode(result);
    countryCode=result[? "countryCode"];
    countryName=result[? "countryName"];
    if (gettingEmergencyNumber) {
        gettingEmergencyNumber=false;
        if (is_undefined(latitude) || is_undefined(longitude)) {
            emergencyNumber="678";
        }
        else {
            getEmergency=getEmergencyNumber(countryCode, latitude, longitude);
        }
    }
}
else if (ID==getEmergency) {
    raw=result;
    result=json_decode(result);
    var data=result[? "data"], dispatch=data[? "dispatch"], list=undefined;
    if (ds_map_exists(dispatch, "gsm") &amp;&amp; !is_undefined(dispatch[? "gsm"])) {
        list=dispatch[? "gsm"];
    }
    else {
       list=dispatch[? "all"];
    }
    emergencyNumber = list[| 0];
    if (debug_mode) {
        show_debug_message("List: "+string(list));
        show_debug_message("Response: "+raw);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop location tracking.
if (gps_is_supported and location_is_updating()) {
    location_update_stop();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_mode) {
    draw_text(10, 10, "DEBUG MODE");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
